# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /register:
    post:
      summary: register
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: Success Register User
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserId"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /login:
    post:
      summary: login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReq'
      responses:
        '200':
          description: Success Login
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/SuccessLogin"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /my-profile:
    get:
      summary: Get User by Id
      operationId: GetUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success Register User
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserShort"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message" 
    patch:
      summary: Edit User by Id
      security:
        - BearerAuth: []
      operationId: EditUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserShort'

      responses:
        '200':
          description: Success Update User
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Message"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"             
securityDefinitions:
  jwt:
    type: apiKey
    name: Authorization
    in: header 
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserId:
      type: object
      required:
        - id
      properties:
        id: 
          type: string
    FullName:
      type: object
      required:
        - full_name
      properties:
        full_name: 
          type: string
    Password:
      type: object
      required:
        - password
      properties:
        password: 
          type: string
    PhoneNumber:
      type: object
      required:
        - phone_number
      properties:
        phone_number: 
          type: string
    Message:
      type: object
      required:
        - status
        - message
      properties:
        message:
          type: string
        status:
          type: boolean
    Token:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    RegisterUserRequest:
      allOf:
        - $ref: '#/components/schemas/FullName'
        - $ref: '#/components/schemas/PhoneNumber'
        - $ref: '#/components/schemas/Password'
    UserShort:
      type: object
      allOf:
        - $ref: '#/components/schemas/FullName'
        - $ref: '#/components/schemas/PhoneNumber'
    LoginReq:
      type: object
      allOf:
        - $ref: '#/components/schemas/PhoneNumber'
        - $ref: '#/components/schemas/Password'
    SuccessLogin:
      type: object
      allOf:
        - $ref: '#/components/schemas/Message'
        - $ref: '#/components/schemas/Token'
        

